# -*- coding: utf-8 -*-
"""Proj1 SONAR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GhxXSbdaKhz3MTQoMdQkDDuSwr_HJrwE

**bold text**
Rock vs Mine Prediction
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

data=pd.read_csv('/content/Copy of sonar data.csv',header=None)

data

data.head()

data.shape

data.isnull().sum()

data[60].value_counts()

#seperating data and labels
x=data.drop(columns=60,axis=1)
y=data[60]

print(x)
print(y)

"""Training test data

"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,stratify=y,random_state=1)

print(x_train.shape,x_test.shape)

"""Model training"""

model=LogisticRegression()

#training the logistic regresiion model with training data
model.fit(x_train,y_train)

"""Model evaluation"""

#accuracy check on train data
x_train_pre=model.predict(x_train)
training_data_accuracy=accuracy_score(x_train_pre,y_train)
print(training_data_accuracy)

#accuracy on test data
x_test_pre=model.predict(x_test)
testing_data_accuracy=accuracy_score(x_test_pre,y_test)
print(testing_data_accuracy)

"""Making a predictive system

"""

#input=(0.0200,0.0371,0.0428,0.0207,0.0954,0.0986,0.1539,0.1601,0.3109,0.2111,0.1609,0.1582,0.2238,0.0645,0.0660,0.2273,0.3100,0.2999,0.5078,0.4797,0.5783,0.5071,0.4328,0.5550,0.6711,0.6415,0.7104,0.8080,0.6791,0.3857,0.1307,0.2604,0.5121,0.7547,0.8537,0.8507,0.6692,0.6097,0.4943,0.2744,0.0510,0.2834,0.2825,0.4256,0.2641,0.1386,0.1051,0.1343,0.0383,0.0324,0.0232,0.0027,0.0065,0.0159,0.0072,0.0167,0.0180,0.0084,0.0090,0.0032)
input=(0.0368,0.0279,0.0103,0.0566,0.0759,0.0679,0.0970,0.1473,0.2164,0.2544,0.2936,0.2935,0.2657,0.3187,0.2794,0.2534,0.1980,0.1929,0.2826,0.3245,0.3504,0.3324,0.4217,0.4774,0.4808,0.6325,0.8334,0.9458,1.0000,0.8425,0.5524,0.4795,0.5200,0.3968,0.1940,0.1519,0.2010,0.1736,0.1029,0.2244,0.3717,0.4449,0.3939,0.2030,0.2010,0.2187,0.1840,0.1477,0.0971,0.0224,0.0151,0.0105,0.0024,0.0018,0.0057,0.0092,0.0009,0.0086,0.0110,0.0052)
input_data=np.asarray(input)
#reshape
input_data_reshape=input_data.reshape(1,-1)
prediction=model.predict(input_data_reshape)
print(prediction)